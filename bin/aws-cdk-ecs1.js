#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const aws_cdk_ecs1_stack_1 = require("../lib/aws-cdk-ecs1-stack");
const app_cdk_stack_1 = require("../lib/app-cdk-stack");
const vpc_ep_config_1 = require("../lib/vpc-ep-config");
const app = new cdk.App();
const awsCdkEcsStack = new aws_cdk_ecs1_stack_1.AwsCdkEcs1Stack(app, 'AwsCdkEcs1Stack', {
    /* If you don't specify 'env', this stack will be environment-agnostic.
     * Account/Region-dependent features and context lookups will not work,
     * but a single synthesized template can be deployed anywhere. */
    /* Uncomment the next line to specialize this stack for the AWS Account
     * and Region that are implied by the current CLI configuration. */
    // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
    /* Uncomment the next line if you know exactly what Account and Region you
     * want to deploy the stack to. */
    env: { account: '172489758104', region: 'us-east-1' },
});
const vpcEpConfigStack = new vpc_ep_config_1.VpcEpConfig(app, 'VpcEpConfigStack', {
    appVpc: awsCdkEcsStack.appVpc
});
const appCdkStack = new app_cdk_stack_1.AppCdkStack(app, 'AppCdkStack', {
    appVpc: awsCdkEcsStack.appVpc,
    ecrRepository: awsCdkEcsStack.appRepository
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLWNkay1lY3MxLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXdzLWNkay1lY3MxLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVDQUFxQztBQUNyQyxtQ0FBbUM7QUFFbkMsa0VBQTREO0FBQzVELHdEQUFtRDtBQUNuRCx3REFBbUQ7QUFFbkQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxjQUFjLEdBQUcsSUFBSSxvQ0FBZSxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRTtJQUNqRTs7cUVBRWlFO0lBRWpFO3VFQUNtRTtJQUNuRSw2RkFBNkY7SUFFN0Y7c0NBQ2tDO0lBQ2xDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRTtDQUd0RCxDQUFDLENBQUM7QUFFSCxNQUFNLGdCQUFnQixHQUFHLElBQUksMkJBQVcsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUU7SUFDaEUsTUFBTSxFQUFFLGNBQWMsQ0FBQyxNQUFNO0NBQzlCLENBQUMsQ0FBQztBQUdILE1BQU0sV0FBVyxHQUFHLElBQUksMkJBQVcsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFO0lBQ3RELE1BQU0sRUFBRSxjQUFjLENBQUMsTUFBTTtJQUM3QixhQUFhLEVBQUUsY0FBYyxDQUFDLGFBQWE7Q0FDNUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICdzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXInO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGVjciBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWNyJztcbmltcG9ydCB7IEF3c0Nka0VjczFTdGFjayB9IGZyb20gJy4uL2xpYi9hd3MtY2RrLWVjczEtc3RhY2snO1xuaW1wb3J0IHsgQXBwQ2RrU3RhY2sgfSBmcm9tICcuLi9saWIvYXBwLWNkay1zdGFjayc7XG5pbXBvcnQgeyBWcGNFcENvbmZpZyB9IGZyb20gJy4uL2xpYi92cGMtZXAtY29uZmlnJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3QgYXdzQ2RrRWNzU3RhY2sgPSBuZXcgQXdzQ2RrRWNzMVN0YWNrKGFwcCwgJ0F3c0Nka0VjczFTdGFjaycsIHtcbiAgLyogSWYgeW91IGRvbid0IHNwZWNpZnkgJ2VudicsIHRoaXMgc3RhY2sgd2lsbCBiZSBlbnZpcm9ubWVudC1hZ25vc3RpYy5cbiAgICogQWNjb3VudC9SZWdpb24tZGVwZW5kZW50IGZlYXR1cmVzIGFuZCBjb250ZXh0IGxvb2t1cHMgd2lsbCBub3Qgd29yayxcbiAgICogYnV0IGEgc2luZ2xlIHN5bnRoZXNpemVkIHRlbXBsYXRlIGNhbiBiZSBkZXBsb3llZCBhbnl3aGVyZS4gKi9cblxuICAvKiBVbmNvbW1lbnQgdGhlIG5leHQgbGluZSB0byBzcGVjaWFsaXplIHRoaXMgc3RhY2sgZm9yIHRoZSBBV1MgQWNjb3VudFxuICAgKiBhbmQgUmVnaW9uIHRoYXQgYXJlIGltcGxpZWQgYnkgdGhlIGN1cnJlbnQgQ0xJIGNvbmZpZ3VyYXRpb24uICovXG4gIC8vIGVudjogeyBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULCByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB9LFxuXG4gIC8qIFVuY29tbWVudCB0aGUgbmV4dCBsaW5lIGlmIHlvdSBrbm93IGV4YWN0bHkgd2hhdCBBY2NvdW50IGFuZCBSZWdpb24geW91XG4gICAqIHdhbnQgdG8gZGVwbG95IHRoZSBzdGFjayB0by4gKi9cbiAgZW52OiB7IGFjY291bnQ6ICcxNzI0ODk3NTgxMDQnLCByZWdpb246ICd1cy1lYXN0LTEnIH0sXG5cbiAgLyogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY2RrL2xhdGVzdC9ndWlkZS9lbnZpcm9ubWVudHMuaHRtbCAqL1xufSk7XG5cbmNvbnN0IHZwY0VwQ29uZmlnU3RhY2sgPSBuZXcgVnBjRXBDb25maWcoYXBwLCAnVnBjRXBDb25maWdTdGFjaycsIHtcbiAgYXBwVnBjOiBhd3NDZGtFY3NTdGFjay5hcHBWcGNcbn0pO1xuXG5cbmNvbnN0IGFwcENka1N0YWNrID0gbmV3IEFwcENka1N0YWNrKGFwcCwgJ0FwcENka1N0YWNrJywge1xuICBhcHBWcGM6IGF3c0Nka0Vjc1N0YWNrLmFwcFZwYyxcbiAgZWNyUmVwb3NpdG9yeTogYXdzQ2RrRWNzU3RhY2suYXBwUmVwb3NpdG9yeVxufSk7XG4iXX0=